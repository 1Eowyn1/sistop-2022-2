#+options: toc:nil

* Revisi√≥n de la tarea #1, ¬´¬øCu√°ndo es una llamada al sistema?

** Comentarios repetitivos
Hay algunos comentarios que es muy com√∫n hacer, as√≠ que me evito
repeticiones, y los refiero a esta secci√≥n. ¬°Disculpen que yo sea tan
flojo üòâ

- include :: Los que me marcaron =import=, =using=, =#include= o
  similares: Me parece interesante ver que incluyen a estas
  directivas. Es cierto, cumplirlas requiere de buscar, abrir y leer
  una serie de archivos, que son llamadas al sistema ‚Äî pero son
  /directivas al compilador/, y normalmente no forman parte de tu
  c√≥digo compilado.

  En todo caso, dependiendo del lenguaje: ya depender√° de c√≥mo
  invocas al compilador si hace /ligado est√°tico/ o /din√°mico/...

- Control de flujo :: El control de flujo de los programas (un salto,
  ya sea para /bifurcar/ la l√≥gica o para introducir ciclos, que
  dependa del resultado de la evaluaci√≥n de una condicional, que puede
  ser un =if=, =while=, =for=, =case=, =break=, llamadas a funci√≥n o
  similares) se resuelve completamente dentro de la m√°quina von
  Neumann, por lo que no requiere de una llamada al sistema.

- Consola limpia :: Siempre que veo llamadas como =system(cls)=
  (Windows) o =system(clear)= (Unix) rechino los dientes... La llamada
  al sistema que tienes en tu programa en =system()=, que hace el
  equivalente en tu sistema a un =fork()= seguido de un =exec()=. Esto
  lanza a un nuevo programa, que averigua las caracter√≠sticas de la
  consola que est√°s utilizando (mediante una serie de lecturas de
  archivos y de =sockets=... Y env√≠a una cadena que le indica a la
  consola que limpie el √°rea de visualizaci√≥n. En mi equipo, esta
  cadena es =\33[H\33[2J=. ¬°Cu√°nto trabajo le ahorrar√≠amos al sistema
  sin invocar a =system()=!

** Enrique Albores
- Archivos :: [[./AlboresEnrique/Menu 1.png][Menu 1.png]], [[./AlboresEnrique/Menu 2.jpg][Menu 2.jpg]]
- Comentarios ::
  - Ojo: Marcas √∫nicamente como =LLAMADA AL SISTEMA= a l√≠nea tras
    l√≠nea, pero no indicas ni una vez por qu√© lo son (que es parte de
    la consigna) ‚òπ
  - Correcto: Casi todas las l√≠neas de tu programa son llamadas al
    sistema
    - Claro, es un programa en el que casi todo lo que se hace es
      entrada/salida
  - Comentario repetitivo *control de flujo*
- Calificaci√≥n :: 7.5

** Luis Alejandro
- Archivos :: [[./AlejandroLuis/tarea1.txt][tarea1.txt]]
- Comentarios ::
  - Comentario repetitivo *control de flujo*. La declaraci√≥n de una
    funci√≥n (en este caso, la declaraci√≥n de =main()=) se compila a
    una etiqueta y un poco de aritm√©tica de apuntadores.
  - ni el =while= ni la condici√≥n que contiene (=c!=EOF=) son llamadas
    al sistema: El primero es un salto condicional, y la segunda es
    una comparaci√≥n entre un valor en memoria (=c=) constante
    (=EOF=). ¬°Esto lo puede hacer perfectamente tu m√°quina von Neumann!
- Calificaci√≥n :: 9

** Carlos Aleman
- Archivos :: [[./CarlosAleman/Tarea1.html][Tarea1.html]]
- Comentarios ::
  - Comentario repeptitivo *include*
  - ¬°Recuerda que una m√°quina von Neumann no tiene entrada y salida!
    Las llamadas a =Console.WriteLine()= y =Console.ReadLine()= son
    tambi√©n llamadas al sistema.
  - =sr.ReadLine()= es tambi√©n una llamada al sistema: Avanza sobre el
    archivo =sr=, leyendo hasta encontrar un =\n= cada vez
  - =catch (Exception e)= deber√≠a estar marcado tambi√©n, me parece:
    para poder /atrapar/ una excepci√≥n, es necesario
    registrarla. Claro, ese registro se llevar√≠a a cabo al entrar al
    bloque =try=; el bloque =catch= podr√≠a ser similar a lo que les
    mostr√© de las se√±ales, un bloque de c√≥digo no necsariamente
    contiguo/en l√≠nea.
- Calificaci√≥n :: 9

** Andrea Andres
- Archivos :: [[./AndresAndrea/Tarea 1.pdf][Tarea 1.pdf]]
- Comentarios ::
  - L√≠nea 141, la creaci√≥n de tu objeto =Scanner= no necesariamente va
    a ser una llamada al sistema (aunque podr√≠a tenerlo, como parte de
    su inicializaci√≥n; no puedo ver su fuente para asegur√°rtelo);
    est√°s √∫nicamente /preparando una estructura/ que va a trabajar
    sobre =System.in=, pero es posible que no la est√©s /utilizando/
    a√∫n.
    - Pero supongo que =sc.hasNext()= y =sc.nextLine()= (l√≠neas
      148-149) s√≠ operan sobre los datos de entrada: Ah√≠ estar√≠an las
      llamadas al sistema.
  - Las l√≠neas 157-158 (=BufferedReader(archivo)= y  =entrada =
    buffer.readLine()=) son llamadas al sistema. Misma nota respecto a
    las l√≠neas 176/177.
  - M√°s que el =e.printStackTrace()= (l. 162), me parece que ser√≠a el
    =catch Exception e)= (l. 161) que tendr√≠as que marcar como
    llamada. Mostrar el =stack trace= puede hacerse con examinar
    /desde dentro/ la memoria del proceso. Lo hiciste precisamente as√≠
    en las l√≠neas 180/181.
  - =System.out.println= es una llamada al sistema.
- Calificaci√≥n :: 9

** Alejandro Barreiro
- Archivos :: [[./BarreiroAlejandro/tarea1.pdf][tarea1.pdf]]
- Comentarios ::
  - La llamada a tu funci√≥n =escribir()= (dentro de =crearArchivo()=)
    no es una llamada al sistema, sino que s√≥lo un salto a otro punto
    de tu programa. /Resulta/, s√≠, en varias llamadas al sistema
    (porque hay varias llamadas dentro de =escribir()=), pero no es
    una llamada al sistema por s√≠ s√≥lo
  - Las verificaciones acerca de la existencia de un archivo
    (=archivo.exists()=) en distintos puntos del programa, as√≠ como
    =directoryToBeDeleted.listFiles()=, operan sobre esa abstracci√≥n
    conocida como /directorio/ y, por tanto, son tambi√©n llamadas al
    sistema.
- Calificaci√≥n :: 9

** Victor Barrera
- Archivos :: [[./BarreraVictor/BarreraVictor.md][BarreraVictor.md]]
- Comentarios ::
  - Comentario repetitivo *include*
  - Poner y quitar elementos en el /stack/ (esto es, llamar o retornar
    de funciones) /normalmente/ no requieren de llamadas al sistema
    (llega a ser necesario, por ejemplo, cuando compilas con el uso de
    /canarios/... ¬°Pero eso lo veremos m√°s adelante!)
- Calificaci√≥n :: 10

** Francisco Barrios
- Archivos :: [[./BarriosFrancisco/Tarea 1.htm][Tarea 1.htm]], [[./BarriosFrancisco/Tarea 1_archivos/colorschememapping.xml][colorschememapping.xml]], [[./BarriosFrancisco/Tarea 1_archivos/filelist.xml][filelist.xml]], [[./BarriosFrancisco/Tarea 1_archivos/themedata.thmx][themedata.thmx]]
- Comentarios ::
  - Comentario repetitivo *include*.
  - Si bien es correcto que =srand(time(NULL))= hace una llamada al
    sistema, es por =time(NULL)= (consultar la hora actual). M√°s
    adelante, =rand()%1000= puede resolverse por completo internamente.
  - Muchas veces ponemos como ejemplo de llamada al sistema obtener o
    liberar memoria... Pero ya veremos m√°s adelante que, por
    cuestiones de eficiencia, =malloc()= y =free()= pueden llamarse
    sin causar llamadas al sistema.
  - Las llamadas a =HeapSort()=, =quickSort()= y =bubbleSort()= son a
    un archivo externo, s√≠. Pero como ya veremos m√°s adelante, este
    archivo no se abre cada vez, sino que es /mapeado a memoria/,
    ahorr√°ndote el costo en llamadas.
- Calificaci√≥n :: 10

** Velasco Bryan
- Archivos :: [[./BryanVelasco/Tarea 1.html][Tarea 1.html]]
- Comentarios ::
  - La intuici√≥n de que asignar memoria es una llamada al sistema es
    buena, pero en este caso, =String input= lo maneja el compilador,
    y reserva el espacio de forma est√°tica al iniciar la ejecuci√≥n de
    =Main()=, no es una llamada al sistema. Si acaso (pero te refiero
    a la nota que le hice a Francisco Barrios), la llamada al sistema
    vendr√≠a al hacer una asignaci√≥n /din√°mica/, como la proveniente de
    la familia de =malloc()=.
  - Muy bueno con lo del =try= / =catch=: La llamada al sistema se
    presentar√≠a al /registrar/ el manejador de excepci√≥n.
  - Veo que me marcaste √∫nicamente el primer caso de llamada en tu
    programa. ¬°Muy bien hecho!
- Calificaci√≥n :: 10

** Alfredo Correa
- Archivos :: [[./CorreaAlfredo/tarea-1.html][tarea-1.html]]
- Comentarios ::
  - Comentario repetitivo *include*
  - La declaraci√≥n de tus variables =opcion=, =a=, =b= y =c= no son
    llamadas al sistema: Son directivas al compilador, que reserva el
    espacio necesario /al crear el archivo que contiene a tu
    programa/, no en tiempo de ejecuci√≥n.
  - Marcaste de m√°s un poco alegremente üòâ Las llamadas a funci√≥n
    =sumar()=, =restar()=, =multiplicar()=, =dividir()= no son
    llamadas al sistema (ni siquiera considerando el cuerpo interno de
    dichas funciones).
  - La comparaci√≥n =if(b!=0)= tampoco es una llamada al sistema.
- Calificaci√≥n :: 9

** Jes√∫s Davila
- Archivos :: [[./DavilaJesus/Tarea1DavilaOrtegaJesusEduardo.pdf][Tarea1DavilaOrtegaJesusEduardo.pdf]]
- Comentarios ::
  - Todas las cadenas que imprimes (esto es, todas las llamadas a
    =System.out.println()=) son llamadas al sistema.
  - =archivo.exists()= verifica en el listado del directorio, por
    tanto es una llamada al sistema.
  - La creaci√≥n din√°mica de objetos (=new File()=, =new FileWriter()=)
    /no necesariamente/ son llamadas al sistema: depende de si hay
    /memoria asignada al proceso/ disponible o no. S√≠, detalles
    espec√≠ficos con los que por ahora no espero que nos peleemos üòâ
    aunque iremos llegando a alguno de ellos.
- Calificaci√≥n :: 9

** Axel Escalona
- Archivos :: [[./EscalonaAxel/tarea1.pptx][tarea1.pptx]]
- Comentarios ::
  - Comentario repetitivo *consola limpia*
  - Respecto a tu nota sobre el =switch= / =case=, te remito al
    comentario repetitivo =control de flujo=. No est√°s llamando a
    otros procesos, sino que a otras /funciones/, y todo eso es salto
    interno.
  - La invocaci√≥n a =pow()= no es una llamada al sistema: Una vez que
    el programa est√° en ejecuci√≥n, la biblioteca (*no se dice
    librer√≠a* en espa√±ol) =math.h= est√° en el espacio de memoria, y
    puedes llamar a sus funciones b√°sicamente como si fueran parte de
    tu c√≥digo
- Calificaci√≥n :: 9

** Giselle Espinosa
- Archivos :: [[./EspinosaGiselle/Tarea1_EspinosaGiselle.pdf][Tarea1_EspinosaGiselle.pdf]]
- Comentarios ::
  - =scanf()= y =fflush()= son llamadas al sistema por las mismas
    razones que =printf()=: Porque interact√∫an con un flujo de datos
    externo (que podr√≠a ser un archivo o un dispositivo, da igual).
  - Tu intuici√≥n con =malloc()= y =free()= es mayormente
    correcta... Pero ya veremos m√°s adelante que resulta /a veces/ en
    una llamada al sistema (dependiendo de cu√°nta memoria libre haya
    en un √°rea espec√≠fica).
- Calificaci√≥n :: 10

** Yoav Galdamez
- Archivos :: [[./GaldamezYoav/img20220217_21374244.pdf][img20220217_21374244.pdf]]
- Comentarios ::
  - Ojo: Marcas √∫nicamente en verde las l√≠neas con llamadas al sistema
    tras l√≠nea, pero no indicas ni una vez por qu√© lo son (que es
    parte de la consigna) ‚òπ
- Calificaci√≥n :: 7.5

** Christian Leyva
- Archivos :: [[./LeyvaChristian/README.md][README.md]], [[./LeyvaChristian/Tarea1.html][Tarea1.html]]
- Comentarios ::
  - ¬°Excelente presentaci√≥n, felicidades y gracias!
  - Comentario repetitivo *include*.
  - Comentario repetitivo *consola limpia*
- Calificaci√≥n :: 10

** Nieto Pamela
- Archivos :: [[./PamelaNieto/Tarea 1.pdf][Tarea 1.pdf]]
- Comentarios ::
  - Declarar las variables que vas a usar no geenra llamadas al
    sistema: puedes verlo como directivas al compilador, para que
    reserve un espacio en el tama√±o del stack de cada funci√≥n (o en el
    espacio global, si est√°n declararadas en el nivel superior) para
    estos datos; una vez en ejecuci√≥n, estos espacios ya ‚Äúest√°n ah√≠‚Äù y
    simplemente se utilizan.
  - Las operaciones aritm√©ticas no son llamadas al sistema, las puede
    realizar directamente una computadora von Neumann pura.
  - Tus =readln()= son llamadas al sistema, s√≠ ‚Äî pero no porque
    utilice a una variable, sino porque maneja interacci√≥n con el
    /mundo exterior/.
- Calificaci√≥n :: 9

** Emilio Pi√±a
- Archivos :: [[./Pi√±aEmilio/Tarea1.pdf][Tarea1.pdf]]
- Comentarios ::
  - Las /declaraciones/ al inicio de tu clase =Radix= son indicaciones
    para el compilador, y no se ejecutan (por tanto, no son llamadas
    al sistema). Tienen como fin √∫nicamente que el compilador pueda
    prever el tama√±o de las estructuras a crear (funciones u objetos),
    y que exponga los s√≠molos adecuados cuando sea llamado.
  - Vale lo mismo para declarar la funci√≥n declarando su =throws=: Son
    para indicarle al compilador que debe poderle exigir a quien llame
    esta funci√≥n que tenga un =catch= acorde.
  - nom√°s por si acaso: en tu p√°gina 3, del =switch(digito)=, las
    llamadas la sistema son √∫nicamente las distintas
    =fw[n].write(completo)=, no los =case= ni =break= (comentario
    repetitivo *control de flujo*)
  - P√°g. 3, la l√≠nea 145 (=findWithinHorizon()=) no me parece que
    tenga una llamada al sistema. Las siguientes tres s√≠.
  - Falta marcar algunos =new FileWriter=, =println()=, y
    similares... pero me parece que el ejercicio demuestra que los
    comprendiste bien.
- Calificaci√≥n :: 9

** Brenda P√©rez
- Archivos :: [[./P√©rezBrenda/Llamadas-al-sistema.txt][Llamadas-al-sistema.txt]]
- Comentarios ::
  - Comentario repetitivo *include*
  - Te falt√≥ agregar las llamadas al sistema para la creaci√≥n de los
    cinco hilos (=new Thread()=), el que inicien su ejecuci√≥n
    (=corredor1.Start()=), y que el hilo inicial ‚Äúdescanse‚Äù por un
    segundo (=Thread.Sleep(1000)=).
    - Claro, siendo Java, es posible que est√©s usando hilos de
      usuario... pero altamente improbable (adem√°s, est√°s usando
      =System.Threading=)
  - No s√≥lo enviar informaci√≥n a consola requiere de una llamada al
    sistema: tambi√©n leer de ella (=Console.ReadKey()=).
- Calificaci√≥n :: 9

** Oscar Ramos
- Archivos :: [[./RamosOscar/llamadas al sistema.pdf][llamadas al sistema.pdf]], [[./RamosOscar/llamadas_al_sistema.pdf][llamadas_al_sistema.pdf]]
- Comentarios ::
  - Asumo que tus dos archivos son iguales (se ven muy parecidos).
  - Ojo: Marcas √∫nicamente en verde las l√≠neas con llamadas al sistema
    tras l√≠nea, pero no indicas ni una vez por qu√© lo son (que es
    parte de la consigna) ‚òπ
  - Te falt√≥ marcar un par de llamadas a =printf()= (aunque no le
    hace, me queda claro que reconoces que =printf()= causa una
    llamada al sistema)
  - Tu programa es, de todos los que me subieron, el mejor ejemplo de
    una /r√°faga de CPU/: En toda la primera p√°gina hay √∫nicamente una
    llamada al sistema: Puede ejecutarse sin requerir de ning√∫n cambio
    de contexto. Casi todos los programas presentados son m√°s bien un
    ejemplo de /r√°fagas de entrada/salida/, porque requieren
    constantemente interrumpir su ejecuci√≥n.
- Calificaci√≥n :: 7.5

** Andr√© Rosales
- Archivos :: [[./RosalesAndr√©/tarea1.pdf][tarea1.pdf]]
- Comentarios ::
  - De acuerdo con las l√≠neas que marcas, pero no con la raz√≥n por la
    que explicas üòâ

    =cin= y =cout= est√°n vinculados respectivamente a =STDIN= y
    =STDOUT= (entrada y salida est√°ndar). Los buffers ya est√°n
    ‚Äúamarrados‚Äù desde el principio de la ejecuci√≥n. Pero la llamada al
    sistema ocurre cuando hay que indicarle al controlador de la
    terminal, ‚Äúno seas malito, as√≥mate a ese buffer y avi√©ntaselo al
    usuario para que lo pueda leer‚Äù.
  - No puedo evitar apuntar a que en tu programa no est√°s preveyendo
    la situaci√≥n de excepci√≥n en caso de recibir un n√∫mero mayor a
    3999 üòâ
- Calificaci√≥n :: 10

** Ricardo Ruelas
- Archivos :: [[./RuelasRicardo/Tarea_1_RuelasViurquezRicardo.pdf][Tarea_1_RuelasViurquezRicardo.pdf]]
- Comentarios ::
  - Comentario repetitivo *include*
  - Como tu programa ejemplo describe una interfaz gr√°fica, me es
    dif√≠cil asegurar el flujo espec√≠fico... /Creo/ que no hace falta
    que marques como llamada al sistema cada elemento que va siendo
    agregado a la interfaz (=Button=, =Label=, etc.), porque son m√°s
    bien llamadas a una biblioteca; me parece (como lo indicas en tu
    √∫ltima nota) que todos estos se ‚Äúconcretan‚Äù en una cadenita de
    muchas llamadas al sistema en el momento de ceder el control a la
    biblioteca gr√°fica, cuando llamas a =app.mainloop()=
    - Ahora que... Esto mismo aplicar√≠a a las otras operaciones que
      marcas relativas al GUI: =messagebox.showinfo()=,
      =root.resizable()=, =root.title()= son tambi√©n √∫nicamente
      indicaciones a la biblioteca gr√°fica
    - Ojo: El que tengas varias ventanas /no significa/ que tengas
      varios procesos. =messagebox.showinfo= crea una nueva /ventana/,
      no un nuevo proceso. Claro, eso se traduce en llamadas al
      sistema, pero ocurre dentro del =mainloop=.
  - Tampoco voy a resistir hacerte una simple recomendaci√≥n sobre el
    c√≥digo üòâ La l√≥gica para acomodar a tus botones en una matriz de
    3√ó3 podr√≠a quedar m√°s f√°cil si, en vez del =if= al final de la
    p√°gina 1, crearas todos los botones con
    =newbutton.grid(row = _/3, column = _%3)= (recuerda que est√°s
    usando aritm√©tica entera).
    - Adem√°s, =seleccion_casilla()= podr√≠a simplificarse si en vez de
      que =jugador= fuera 1 o 2, fuera =True= o =False=. En vez de
      sumar o restar 1 al turno, indicas =jugador = !jugador=, y ya
      cambiaste el turno. Los indicadores de bot√≥n los resuelves con
      un condicional en l√≠nea... Y te ahorras otro poco de engorro
      visual.
  - ¬°Te agradezco que me aventaras el reto de evaluar un programa un
    poco diferente! üòâ
- Calificaci√≥n :: 10

** Jessica Zepeda
- Archivos :: [[./ZepedaJessica/Tarea01_JessicaZepeda.pdf][Tarea01_JessicaZepeda.pdf]]
- Comentarios ::
  - ¬°Me parece que identificaste muy bien las llamadas! Me permito
    apuntar a que el constructor (=new=) y destructor (=.delete()=) de
    tus objetos =File= (¬øy =Scanner=? No lo conozco, pero me parece
    que s√≠) son llamadas al sistema: Se convierten en =open()= y
    =close()=.
- Calificaci√≥n :: 10
